/////////////////////////////////////////////////////////////////////////////
// Name:        consumerecordwindow.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     15/12/2013 00:39:14
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 15/12/2013 00:39:14

// For compilers that support precompilation, includes "wx/wx.h".
#include "stdafx.h"
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "wx/imaglist.h"
////@end includes

#include "consumerecordwindow.h"
#include "../Member/Member.h"
#include "../YukiNailShopManager.h"
#include "../ConsumeRecord/ConsumeRecord.h"
#include "../Member/MemberManager.h"
#include <wx/numdlg.h>

////@begin XPM images
////@end XPM images

/*
 * CConsumeRecordWindow type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CConsumeRecordWindow, wxDialog )


/*
 * CConsumeRecordWindow event table definition
 */

BEGIN_EVENT_TABLE( CConsumeRecordWindow, wxDialog )

////@begin CConsumeRecordWindow event table entries
    EVT_BUTTON( ID_BUTTON13, CConsumeRecordWindow::OnCloseBtnClick )
    EVT_BUTTON( ID_BUTTON14, CConsumeRecordWindow::OnCancelBtnClick )
    EVT_BUTTON( ID_BUTTON15, CConsumeRecordWindow::OnChangeDiscountType )

////@end CConsumeRecordWindow event table entries

END_EVENT_TABLE()


/*
 * CConsumeRecordWindow constructors
 */

CConsumeRecordWindow::CConsumeRecordWindow()
{
    Init();
}

CConsumeRecordWindow::CConsumeRecordWindow( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * CConsumeRecordWindow creator
 */

bool CConsumeRecordWindow::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CConsumeRecordWindow creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end CConsumeRecordWindow creation
    return true;
}


/*
 * CConsumeRecordWindow destructor
 */

CConsumeRecordWindow::~CConsumeRecordWindow()
{
////@begin CConsumeRecordWindow destruction
////@end CConsumeRecordWindow destruction
}


/*
 * Member initialisation
 */

void CConsumeRecordWindow::Init()
{
////@begin CConsumeRecordWindow member initialisation
    m_pNameLabel = NULL;
    m_pTelLabel = NULL;
    m_pAccountBalanceLabel = NULL;
    m_pCloseBtn = NULL;
    m_pCurrentMember = NULL;
////@end CConsumeRecordWindow member initialisation
}


/*
 * Control creation for CConsumeRecordWindow
 */

void CConsumeRecordWindow::CreateControls()
{    
////@begin CConsumeRecordWindow content construction
    // Generated by DialogBlocks, 15/12/2013 00:50:21 (unregistered)

    CConsumeRecordWindow* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x6D88 + (wxChar) 0x8D39 + (wxChar) 0x8BB0 + (wxChar) 0x5F55), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText4->SetFont(wxFont(18, wxSWISS, wxNORMAL, wxNORMAL, false, wxT("黑体")));
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 0, wxALIGN_LEFT|wxALL, 5);

    m_pNameLabel = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x4F1A + (wxChar) 0x5458 + (wxChar) 0x540D + wxT(":") + (wxChar) 0x5C0F + (wxChar) 0x7F51 + (wxChar) 0x5427), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(m_pNameLabel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pTelLabel = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x7535 + (wxChar) 0x8BDD + (wxChar) 0x53F7 + (wxChar) 0x7801), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(m_pTelLabel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pDiscountTypeLabel = new wxStaticText( itemDialog1, wxID_STATIC, _T("折扣类型:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(m_pDiscountTypeLabel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pAccountBalanceLabel = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x8D26 + (wxChar) 0x6237 + (wxChar) 0x4F59 + (wxChar) 0x989D), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(m_pAccountBalanceLabel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer9, 1, wxGROW|wxALL, 5);

    m_pConsumeRecordList = new wxListCtrl( itemDialog1, ID_LISTCTRL1, wxDefaultPosition, wxSize(100, 100), wxLC_REPORT );
    itemBoxSizer9->Add(m_pConsumeRecordList, 1, wxGROW|wxALL, 5);
    m_pConsumeRecordList->InsertColumn(0, _T("日期"));
    m_pConsumeRecordList->SetColumnWidth(0, 70);
    m_pConsumeRecordList->InsertColumn(1, _T("时间"));
    m_pConsumeRecordList->SetColumnWidth(1, 50);
    m_pConsumeRecordList->InsertColumn(2, _T("操作者"));
    m_pConsumeRecordList->SetColumnWidth(2, 100);
    m_pConsumeRecordList->InsertColumn(3, _T("金额"));
    m_pConsumeRecordList->SetColumnWidth(3, 50);
    m_pConsumeRecordList->InsertColumn(4, _T("余额"));
    m_pConsumeRecordList->SetColumnWidth(4, 50);
    m_pConsumeRecordList->InsertColumn(5, _T("明细"));
    m_pConsumeRecordList->SetColumnWidth(5, 420);


    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer11, 0, wxEXPAND|wxALL, 0);

    m_pCancelBtn = new wxButton( itemDialog1, ID_BUTTON14, _T("注销"), wxDefaultPosition, wxDefaultSize, 0 );
    m_pCancelBtn->SetForegroundColour(*wxRED);
    itemBoxSizer11->Add(m_pCancelBtn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxDOWN, 15);

    itemBoxSizer11->Add(5, 5, 1, wxALIGN_CENTER_VERTICAL| wxALL, 10);

    m_pChangeDiscountBtn = new wxButton( itemDialog1, ID_BUTTON15, _T("修改折扣"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(m_pChangeDiscountBtn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxDOWN, 15);

    m_pCloseBtn = new wxButton( itemDialog1, ID_BUTTON13, _T("关闭"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(m_pCloseBtn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxDOWN, 15);

////@end CConsumeRecordWindow content construction
}


/*
 * Should we show tooltips?
 */

bool CConsumeRecordWindow::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CConsumeRecordWindow::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CConsumeRecordWindow bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CConsumeRecordWindow bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CConsumeRecordWindow::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CConsumeRecordWindow icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CConsumeRecordWindow icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON13
 */

void CConsumeRecordWindow::OnCloseBtnClick( wxCommandEvent& event )
{
    EndModal(1);
}

void CConsumeRecordWindow::OnCancelBtnClick( wxCommandEvent& event )
{
    BEATS_ASSERT(m_pCurrentMember != NULL, _T("Current member can't be NULL"));
    if (m_pCurrentMember->GetCancelFlag() == false)
    {
        wxString strRet = wxGetTextFromUser(_T("确定要注销该会员吗？如果确定请输入 \"DELETE\" (不区分大小写)"), wxGetTextFromUserPromptStr);
        if (strRet.CompareTo(_T("delete"), wxString::ignoreCase) == 0)
        {
            m_pCurrentMember->SetCancelFlag(true);
            CMemberManager::GetInstance()->SaveMemberData();
            EndModal(2);
        }
        else
        {
            wxMessageBox(wxString::Format(_T("输入无法识别: %s"), strRet));
        }
    }
    else
    {
        wxString strRet = wxGetTextFromUser(_T("确定要恢复该会员吗？如果确定请输入 \"RESTORE\" (不区分大小写)"), wxGetTextFromUserPromptStr);
        if (strRet.CompareTo(_T("restore"), wxString::ignoreCase) == 0)
        {
            m_pCurrentMember->SetCancelFlag(false);
            CMemberManager::GetInstance()->SaveMemberData();
            EndModal(2);
        }
        else
        {
            wxMessageBox(wxString::Format(_T("输入无法识别: %s"), strRet));
        }

    }
}

void CConsumeRecordWindow::OnChangeDiscountType( wxCommandEvent& event )
{
    if (m_pCurrentMember != NULL)
    {
        wxString strMsg = wxString::Format(_T("当前折扣类型 :%s\n请输入新折扣类型的编号:\n"), m_pCurrentMember->GetDiscountTypeString());
        for (size_t i = eDT_Five; i < eDT_Count; ++i)
        {
            strMsg.Append(wxString::Format("%d. %s\n", i, pszDiscountTypeString[i]));
        }
        long iRet = wxGetNumberFromUser(strMsg, wxGetTextFromUserPromptStr, _T("输入类型编号"), m_pCurrentMember->GetDiscountType());
        if (iRet != -1)
        {
            if (iRet < eDT_Five || iRet >= eDT_Count)
            {
                wxMessageBox(_T("输入不合法,请重试!"));
            }
            else if (iRet != m_pCurrentMember->GetDiscountType())
            {
                m_pCurrentMember->SetDiscountType((EDiscountType)iRet);
                CMemberManager::GetInstance()->SaveMemberData();
                this->UpdateData(m_pCurrentMember);
            }
        }
    }
}

void CConsumeRecordWindow::UpdateData( const CMember* pMember )
{
    m_pCurrentMember = (CMember*)pMember;
    wxString strNameLabel = _T("会员名: ");
    strNameLabel.Append(pMember->GetName());
    m_pNameLabel->SetLabelText(strNameLabel);
    wxString strTelLabel = _T("电话: "); 
    strTelLabel.Append(pMember->GetTelString());
    m_pTelLabel->SetLabelText(strTelLabel);

    wxString strDiscountType = _T("折扣: ");
    strDiscountType.Append(pMember->GetDiscountTypeString());
    m_pDiscountTypeLabel->SetLabelText(strDiscountType);

    wxString strBalanceLabel = _T("余额: ");
    strBalanceLabel.Append(wxString::Format(_T("%.2f"), pMember->GetBalance()));
    m_pAccountBalanceLabel->SetLabelText(strBalanceLabel);

    if (m_pCurrentMember->GetCancelFlag())
    {
        m_pCancelBtn->SetLabel(_T("恢复"));
    }

    m_pConsumeRecordList->DeleteAllItems();
    const TYearConsumeRecordMap& consumeMap = CYukiNailShopManager::GetInstance()->GetConsumeRecordsMap();
    for (TYearConsumeRecordMap::const_iterator yearIter = consumeMap.begin(); yearIter != consumeMap.end(); ++yearIter)
    {
        for (TMonthConsumeRecordMap::const_iterator monthIter = yearIter->second.begin(); monthIter != yearIter->second.end(); ++monthIter)
        {
            for (TDayConsumeRecordMap::const_iterator dayIter = monthIter->second.begin(); dayIter != monthIter->second.end(); ++dayIter)
            {
                CConsumeRecord* pRecord = dayIter->second;
                if (pRecord->GetConsumeType() == eCT_Member || pRecord->GetConsumeType() == eCT_Recharge)
                {
                    if (pRecord->GetCustomerString() == pMember->GetTelString())
                    {
                        ShowRecord(pRecord);
                    }
                }
            }
        }
    }
}

void CConsumeRecordWindow::ShowRecord(const CConsumeRecord* pRecord)
{
    wxListItem listItem;
    listItem.SetId(m_pConsumeRecordList->GetItemCount());
    listItem.SetColumn(0);
    const SYSTEMTIME& createTime = pRecord->GetConsumeRecordTime();
    listItem.SetText(wxString::Format(_T("%d-%d-%d"), createTime.wYear, createTime.wMonth, createTime.wDay));
    m_pConsumeRecordList->InsertItem(listItem);

    listItem.SetColumn(1);
    listItem.SetText(wxString::Format(_T("%d:%.2d"), createTime.wHour, createTime.wMinute));
    m_pConsumeRecordList->SetItem(listItem);

    listItem.SetColumn(2);
    const TCHAR* pszOperatorName = pRecord->GetOperatorName();
    listItem.SetText(pszOperatorName == NULL ? _T("未知") : pszOperatorName);
    m_pConsumeRecordList->SetItem(listItem);

    listItem.SetColumn(3);
    listItem.SetText(wxString::Format(_T("%.2f"), pRecord->GetConsumeAmount()));
    m_pConsumeRecordList->SetItem(listItem);

    listItem.SetColumn(4);
    listItem.SetText(wxString::Format(_T("%.2f"), pRecord->GetAccountBalance()));
    m_pConsumeRecordList->SetItem(listItem);

    listItem.SetColumn(5);
    listItem.SetText(pRecord->GetDetailString());
    m_pConsumeRecordList->SetItem(listItem);

}

