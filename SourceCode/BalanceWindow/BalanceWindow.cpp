/////////////////////////////////////////////////////////////////////////////
// Name:        balancewindow.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     12/12/2013 19:40:05
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 12/12/2013 19:40:05

// For compilers that support precompilation, includes "wx/wx.h".
#include "stdafx.h"
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "balancewindow.h"
#include "../YukiNailShopManager.h"
#include "../ConsumeRecord/ConsumeRecord.h"
#include "../Member/Member.h"
#include "../Member/MemberManager.h"
////@begin XPM images
////@end XPM images

/*
 * CBalanceWindow type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CBalanceWindow, wxDialog )


/*
 * CBalanceWindow event table definition
 */

BEGIN_EVENT_TABLE( CBalanceWindow, wxDialog )

////@begin CBalanceWindow event table entries
    EVT_BUTTON( ID_BUTTON1, CBalanceWindow::OnSubmitBtnClick )
    EVT_BUTTON( ID_BUTTON2, CBalanceWindow::OnCancelBtnClick )
    EVT_CHOICE( ID_CHOICE, CBalanceWindow::OnCustomerTypeSelected )
    EVT_BUTTON( ID_BUTTON7, CBalanceWindow::OnMemberVerifyBtnClick )
    EVT_TEXT_ENTER( ID_TEXTCTRL7, CBalanceWindow::OnProcessMemberDataTextEnter )

////@end CBalanceWindow event table entries

END_EVENT_TABLE()


/*
 * CBalanceWindow constructors
 */

CBalanceWindow::CBalanceWindow()
{
    Init();
}

CBalanceWindow::CBalanceWindow( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * CBalanceWindow creator
 */

bool CBalanceWindow::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CBalanceWindow creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end CBalanceWindow creation
    return true;
}


/*
 * CBalanceWindow destructor
 */

CBalanceWindow::~CBalanceWindow()
{
////@begin CBalanceWindow destruction
////@end CBalanceWindow destruction
}


/*
 * Member initialisation
 */

void CBalanceWindow::Init()
{
////@begin CBalanceWindow member initialisation
////@end CBalanceWindow member initialisation
}


/*
 * Control creation for CBalanceWindow
 */

void CBalanceWindow::CreateControls()
{    
////@begin CBalanceWindow content construction
    // Generated by DialogBlocks, 12/12/2013 19:40:50 (unregistered)

    CBalanceWindow* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 2, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x7ED3 + wxT("  ") + (wxChar) 0x7B97), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText4->SetFont(wxFont(18, wxSWISS, wxNORMAL, wxNORMAL, false, wxT("黑体")));
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 0, wxALIGN_LEFT|wxLEFT, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x672C + (wxChar) 0x6B21 + (wxChar) 0x6D88 + (wxChar) 0x8D39), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pConsumeAmountText = new wxTextCtrl( itemDialog1, ID_TEXTCTRL2, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(m_pConsumeAmountText, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText8 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x5143), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemStaticText8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
    wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer9, 0, wxALIGN_LEFT|wxLEFT, 5);

    wxStaticText* itemStaticText10 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x6D88 + (wxChar) 0x8D39 + (wxChar) 0x7C7B + (wxChar) 0x578B), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer9->Add(itemStaticText10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_pCustomerTypeChoicesStrings;
    for (size_t i = 0; i < sizeof(pszConsumeTypeString) / sizeof(TCHAR*); ++i)
    {
        m_pCustomerTypeChoicesStrings.Add(pszConsumeTypeString[i]);
    }
    m_pCustomerTypeChoices = new wxChoice( itemDialog1, ID_CHOICE, wxDefaultPosition, wxDefaultSize, m_pCustomerTypeChoicesStrings, 0 );
    m_pCustomerTypeChoices->SetStringSelection(wxGetTranslation(wxString() + (wxChar) 0x666E + (wxChar) 0x901A));
    itemBoxSizer9->Add(m_pCustomerTypeChoices, 1, wxGROW|wxALL, 5);

    m_pMemberVerifySizer = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer9->Add(m_pMemberVerifySizer, 0, wxALIGN_CENTER_VERTICAL, 0);

    wxStaticText* itemStaticText13 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x624B + (wxChar) 0x673A + (wxChar) 0x53F7 + (wxChar) 0x7801), wxDefaultPosition, wxDefaultSize, 0 );
    m_pMemberVerifySizer->Add(itemStaticText13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_pCustomerDataText = new wxTextCtrl( itemDialog1, ID_TEXTCTRL7, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxEXPAND|wxTE_PROCESS_ENTER );
    m_pCustomerDataText->SetMaxLength(11);
    m_pMemberVerifySizer->Add(m_pCustomerDataText, 1, wxGROW|wxALL, 0);

    m_pMemeberVerifyBtn = new wxButton( itemDialog1, ID_BUTTON7, wxGetTranslation(wxString() + (wxChar) 0x9A8C + (wxChar) 0x8BC1), wxDefaultPosition, wxDefaultSize, 0 );
    m_pMemberVerifySizer->Add(m_pMemeberVerifyBtn, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_pMemberVerifySizer->Show(false);

    m_pCustomerInfoSizer = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(m_pCustomerInfoSizer, 0, wxGROW|wxLEFT|wxRIGHT, 5);

    m_pCustomerInfoLabel = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x4F1A + (wxChar) 0x5458 + (wxChar) 0x4FE1 + (wxChar) 0x606F), wxDefaultPosition, wxDefaultSize, 0 );
    m_pCustomerInfoSizer->Add(m_pCustomerInfoLabel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pCustomerInfoSizer->Show(false);

    wxStaticBox* itemStaticBoxSizer9Static = new wxStaticBox(itemDialog1, wxID_ANY, wxGetTranslation(wxString() + (wxChar) 0x6D88 + (wxChar) 0x8D39 + (wxChar) 0x660E + (wxChar) 0x7EC6));
    wxStaticBoxSizer* itemStaticBoxSizer9 = new wxStaticBoxSizer(itemStaticBoxSizer9Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer9, 4, wxGROW|wxALL, 5);

    m_pConsumeDetailText = new wxTextCtrl( itemStaticBoxSizer9->GetStaticBox(), ID_TEXTCTRL3, wxEmptyString, wxDefaultPosition, wxDefaultSize );
    itemStaticBoxSizer9->Add(m_pConsumeDetailText, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer11, 0, wxALIGN_RIGHT|wxALL, 5);

    m_pSubmitBtn = new wxButton( itemDialog1, ID_BUTTON1, wxGetTranslation(wxString() + (wxChar) 0x63D0 + (wxChar) 0x4EA4), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(m_pSubmitBtn, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton13 = new wxButton( itemDialog1, ID_BUTTON2, wxGetTranslation(wxString() + (wxChar) 0x53D6 + (wxChar) 0x6D88), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(itemButton13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end CBalanceWindow content construction
}

void CBalanceWindow::OnCustomerTypeSelected( wxCommandEvent& event )
{
    m_pCustomerDataText->Clear();
    m_pCustomerInfoLabel->SetLabelText(_T(""));
    int iSelection = event.GetSelection();
    bool bVipType = iSelection == eCT_VIP;
    if (bVipType)
    {
        m_pConsumeAmountText->SetValue(_T("0"));
    }
    m_pConsumeAmountText->Enable(!bVipType);
    bool bMemberType = iSelection == eCT_Member || iSelection == eCT_Recharge;
    m_pMemberVerifySizer->Show(bMemberType);
    m_pSubmitBtn->Enable(!bMemberType);
    m_pMemeberVerifyBtn->Enable(true);
    m_pCustomerDataText->Enable(true);
    m_pCustomerInfoSizer->Show(false);
    this->Layout();
}

void CBalanceWindow::OnMemberVerifyBtnClick( wxCommandEvent& event )
{
    TString strTel = m_pCustomerDataText->GetValue();
    CMember* pMember = CMemberManager::GetInstance()->GetMember(strTel);
    if (pMember)
    {
        m_pCustomerInfoLabel->SetLabelText(wxString::Format(_T("会员名: %s 手机号码: %s 余额: %.2f"), pMember->GetName(), pMember->GetTelString(), pMember->GetBalance()));
        m_pCustomerInfoSizer->Show(true);
        m_pMemeberVerifyBtn->Enable(false);
        m_pCustomerDataText->Enable(false);
        this->Layout();
        m_pSubmitBtn->Enable(true);
    }
    else
    {
        m_pCustomerDataText->SetFocus();
        wxMessageBox(wxString::Format(_T("手机号:%s 不是会员, 请检查号码重新输入!"), strTel));
    }
}

/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON1
 */

void CBalanceWindow::OnSubmitBtnClick( wxCommandEvent& event )
{
    double dPayAmount;
    wxString strAmount = m_pConsumeAmountText->GetValue();
    if (strAmount.Len() > 0)
    {
        if (strAmount.ToDouble(&dPayAmount))
        {
            wxString strDetail = m_pConsumeDetailText->GetValue();
            if (strDetail.Len() > 2)
            {
                //Check balance.
                bool bBalanceEnough = true;
                if (m_pCustomerTypeChoices->GetSelection() == eCT_Member)
                {
                    TString strTel = m_pCustomerDataText->GetValue();
                    CMember* pMember = CMemberManager::GetInstance()->GetMember(strTel);
                    bBalanceEnough = pMember->GetBalance() >= dPayAmount;
                }
                if (bBalanceEnough)
                {
                    int iRet = wxMessageBox(_T("确定要将当前明细提交到数据库吗？该操作不可撤销。"), _T("提交明细"), wxYES_NO | wxCENTRE);
                    if (iRet == wxYES)
                    {
                        char cConsumeType = m_pCustomerTypeChoices->GetSelection();
                        TString strCustomer;
                        if (cConsumeType == eCT_Member || cConsumeType == eCT_Recharge)
                        {
                            strCustomer = m_pCustomerDataText->GetValue();
                        }
                        CYukiNailShopManager::GetInstance()->SubmitConsumeRecord((float)dPayAmount, cConsumeType, strCustomer, strDetail);
                        this->EndModal(1);
                    }
                }
                else
                {
                    wxMessageBox(_T("当前账户余额不足本次支付, 请及时充值."));
                }
            }
            else
            {
                wxMessageBox(_T("请详细填写消费明细,字数不得小于2个."));
            }
        }
        else
        {
            wxMessageBox(wxString::Format(_T("金额填写错误: %s"), strAmount));
        }
    }
    else
    {
        wxMessageBox(wxString::Format(_T("请填写金额: %s"), strAmount));
    }
}

/*
 * Should we show tooltips?
 */

bool CBalanceWindow::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CBalanceWindow::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CBalanceWindow bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CBalanceWindow bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CBalanceWindow::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CBalanceWindow icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CBalanceWindow icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON2
 */

void CBalanceWindow::OnCancelBtnClick( wxCommandEvent& event )
{
    this->EndModal(0);
}

void CBalanceWindow::OnProcessMemberDataTextEnter( wxCommandEvent& event )
{
    OnMemberVerifyBtnClick(event);
}

