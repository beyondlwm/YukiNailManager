/////////////////////////////////////////////////////////////////////////////
// Name:        registerwindow.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     13/12/2013 12:22:56
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 13/12/2013 12:22:56

// For compilers that support precompilation, includes "wx/wx.h".
#include "stdafx.h"
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "registerwindow.h"
#include "../Account/Account.h"
#include "../Account/AccountManager.h"
#include "../YukiNailShopManager.h"

////@begin XPM images
////@end XPM images


/*
 * CRegisterWindow type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CRegisterWindow, wxDialog )


/*
 * CRegisterWindow event table definition
 */

BEGIN_EVENT_TABLE( CRegisterWindow, wxDialog )

////@begin CRegisterWindow event table entries
    EVT_BUTTON( ID_BUTTON5, CRegisterWindow::OnRegisterAccountBtnClick )
    EVT_BUTTON( ID_BUTTON6, CRegisterWindow::OnRegisterCloseBtnClick )
////@end CRegisterWindow event table entries

END_EVENT_TABLE()


/*
 * CRegisterWindow constructors
 */

CRegisterWindow::CRegisterWindow()
{
    Init();
}

CRegisterWindow::CRegisterWindow( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * CRegisterWindow creator
 */

bool CRegisterWindow::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CRegisterWindow creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CRegisterWindow creation
    return true;
}


/*
 * CRegisterWindow destructor
 */

CRegisterWindow::~CRegisterWindow()
{
////@begin CRegisterWindow destruction
////@end CRegisterWindow destruction
}


/*
 * Member initialisation
 */

void CRegisterWindow::Init()
{
////@begin CRegisterWindow member initialisation
    m_pRegisterAccountText = NULL;
    m_pRegisterPasswordText = NULL;
    m_pRegisterRecheckPasswordText = NULL;
    m_pPrivilegeCheckBox = NULL;
    m_pRegisterSubmitBtn = NULL;
    m_pRegisterCloseBtn = NULL;
    m_bModifyFlag = false;
////@end CRegisterWindow member initialisation
}


/*
 * Control creation for CRegisterWindow
 */

void CRegisterWindow::CreateControls()
{    
////@begin CRegisterWindow content construction
    // Generated by DialogBlocks, 13/12/2013 12:54:09 (unregistered)

    CRegisterWindow* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 1, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_pTitleLabel = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x6CE8 + (wxChar) 0x518C + (wxChar) 0x8D26 + (wxChar) 0x53F7), wxDefaultPosition, wxDefaultSize, 0 );
    m_pTitleLabel->SetFont(wxFont(18, wxSWISS, wxNORMAL, wxNORMAL, false, wxT("黑体")));
    itemBoxSizer3->Add(m_pTitleLabel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x8D26 + (wxChar) 0x53F7), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemStaticText6, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pRegisterAccountText = new wxTextCtrl( itemDialog1, ID_TEXTCTRL4, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    m_pRegisterAccountText->SetMaxLength(10);
    itemBoxSizer5->Add(m_pRegisterAccountText, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 0);

    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer8, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText9 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x5BC6 + (wxChar) 0x7801), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(itemStaticText9, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pRegisterPasswordText = new wxTextCtrl( itemDialog1, ID_TEXTCTRL5, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PASSWORD );
    m_pRegisterPasswordText->SetMaxLength(20);
    itemBoxSizer8->Add(m_pRegisterPasswordText, 0, wxALIGN_CENTER_VERTICAL, 0);

    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer11, 0, wxGROW|wxALL, 5);

    m_pRepasswordLabel = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x518D + (wxChar) 0x6B21 + (wxChar) 0x8F93 + (wxChar) 0x5165 + (wxChar) 0x5BC6 + (wxChar) 0x7801), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(m_pRepasswordLabel, 1, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    m_pRegisterRecheckPasswordText = new wxTextCtrl( itemDialog1, ID_TEXTCTRL6, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PASSWORD );
    m_pRegisterRecheckPasswordText->SetMaxLength(20);
    itemBoxSizer11->Add(m_pRegisterRecheckPasswordText, 0, wxALIGN_CENTER_VERTICAL, 0);

    wxStaticBox* itemStaticBoxSizer14Static = new wxStaticBox(itemDialog1, wxID_ANY, wxGetTranslation(wxString() + (wxChar) 0x6743 + (wxChar) 0x9650 + (wxChar) 0x8BBE + (wxChar) 0x7F6E));
    wxStaticBoxSizer* itemStaticBoxSizer14 = new wxStaticBoxSizer(itemStaticBoxSizer14Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer14, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxArrayString m_pPrivilegeCheckBoxStrings;
    for (size_t i = 0; i < CAccount::eAPT_Count; ++i)
    {
        m_pPrivilegeCheckBoxStrings.Insert(CAccount::pszAccountPrivilegeString[i], i);
    }
    m_pPrivilegeCheckBox = new wxCheckListBox( itemStaticBoxSizer14->GetStaticBox(), ID_CHECKLISTBOX, wxDefaultPosition, wxDefaultSize, m_pPrivilegeCheckBoxStrings, wxLB_MULTIPLE );
    itemStaticBoxSizer14->Add(m_pPrivilegeCheckBox, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer16 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer16, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_pRegisterSubmitBtn = new wxButton( itemDialog1, ID_BUTTON5, wxGetTranslation(wxString() + (wxChar) 0x63D0 + (wxChar) 0x4EA4), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer16->Add(m_pRegisterSubmitBtn, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pRegisterCloseBtn = new wxButton( itemDialog1, ID_BUTTON6, wxGetTranslation(wxString() + (wxChar) 0x5173 + (wxChar) 0x95ED), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer16->Add(m_pRegisterCloseBtn, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end CRegisterWindow content construction
}


/*
 * Should we show tooltips?
 */

bool CRegisterWindow::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CRegisterWindow::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CRegisterWindow bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CRegisterWindow bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CRegisterWindow::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CRegisterWindow icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CRegisterWindow icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON5
 */

void CRegisterWindow::OnRegisterAccountBtnClick( wxCommandEvent& event )
{
    if (m_bModifyFlag)
    {
        bool bModified = false;
        wxString strAccount = m_pRegisterAccountText->GetValue();
        TString typeConvert = strAccount;
        CAccount* pAccount = CAccountManager::GetInstance()->GetAccount(typeConvert);
        wxString strCheckPassword = m_pRegisterRecheckPasswordText->GetValue();
        if (strCheckPassword.Length() == 0)
        {
            wxMessageBox(_T("密码不能为空"));
            m_pRegisterRecheckPasswordText->SetLabel(pAccount->GetPassword());
        }
        else
        {
            size_t uPrivilege = 0;
            size_t uCheckBoxCount = m_pPrivilegeCheckBox->GetCount();
            for (size_t i = 0; i < uCheckBoxCount; ++i)
            {
                if (m_pPrivilegeCheckBox->IsChecked(i))
                {
                    uPrivilege |= (1 << i);
                }
            }

            if (uPrivilege == 0)
            {
                wxMessageBox(_T("请至少设定一个权限"));
            }
            else
            {
                if (pAccount->GetPassword() != strCheckPassword)
                {
                    TString strHistory = wxString::Format(_T("修改账号密码: %s old: %s new: %s"), strAccount, pAccount->GetPassword(), strCheckPassword);
                    CYukiNailShopManager::GetInstance()->AddOperationHistory(strHistory);

                    typeConvert = strCheckPassword;
                    pAccount->SetPassword(typeConvert);

                    bModified = true;
                }
                if (uPrivilege != pAccount->GetPrivilege())
                {
                    TString strHistory = wxString::Format(_T("修改账号权限: %s old: %d new: %d"), strAccount, pAccount->GetPrivilege(), uPrivilege);
                    CYukiNailShopManager::GetInstance()->AddOperationHistory(strHistory);

                    pAccount->SetPrivilege(uPrivilege);
                    bModified = true;
                }
                if (bModified)
                {
                    CAccountManager::GetInstance()->SaveAccountData();
                }
                this->EndModal(1);
            }
        }
    }
    else
    {
        wxString strAccount = m_pRegisterAccountText->GetValue();
        if (strAccount.Len() > 0)
        {
            TString typeConvert = strAccount;
            const CAccount* pAccount = CAccountManager::GetInstance()->GetAccount(typeConvert);
            if (pAccount == NULL)
            {
                wxString strPassword = m_pRegisterPasswordText->GetValue();
                if (strAccount.Len() > 0)
                {
                    wxString strCheckPassword = m_pRegisterRecheckPasswordText->GetValue();
                    if (strCheckPassword == strPassword)
                    {
                        size_t uCheckBoxCount = m_pPrivilegeCheckBox->GetCount();
                        size_t uPrivilege = 0;
                        for (size_t i = 0; i < uCheckBoxCount; ++i)
                        {
                            if (m_pPrivilegeCheckBox->IsChecked(i))
                            {
                                uPrivilege |= (1 << i);
                            }
                        }
                        if (uPrivilege > 0)
                        {
                            TString typeConvert2 = strPassword;
                            CAccount* pAccount = CAccountManager::GetInstance()->RegisterAccount(typeConvert, typeConvert2, uPrivilege);
                            if (pAccount)
                            {
                                TString strHistory = wxString::Format(_T("创建账号: %s"), strAccount);
                                CYukiNailShopManager::GetInstance()->AddOperationHistory(strHistory);
                                wxMessageBox(_T("账户创建成功"));
                                this->EndModal(1);
                            }
                        }
                        else
                        {
                            wxMessageBox(_T("请至少设定一个权限"));
                        }
                    }
                    else
                    {
                        m_pRegisterRecheckPasswordText->Clear();
                        m_pRegisterPasswordText->Clear();
                        m_pRegisterPasswordText->SetFocus();
                        wxMessageBox(_T("两次输入密码不一致"));
                    }
                }
                else
                {
                    m_pRegisterPasswordText->SetFocus();
                    wxMessageBox(_T("密码不能为空"));
                }
            }
            else
            {
                m_pRegisterAccountText->SetFocus();
                wxMessageBox(_T("账号已经存在,不能重复注册"));
            }
        }
        else
        {
            m_pRegisterAccountText->SetFocus();
            wxMessageBox(_T("账号不能为空!"));
        }
    }
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON6
 */

void CRegisterWindow::OnRegisterCloseBtnClick( wxCommandEvent& event )
{
    this->EndModal(0);
}

void CRegisterWindow::ChangeToModifyWindow(const CAccount* pAccount)
{
    m_pTitleLabel->SetLabel(_T("修改账户"));
    m_pRegisterAccountText->SetLabel(pAccount->GetAccountString());
    m_pRegisterAccountText->Enable(false);

    m_pRegisterPasswordText->SetLabel(pAccount->GetPassword());
    m_pRegisterPasswordText->Enable(false);

    m_pRepasswordLabel->SetLabel(_T("输入新密码"));
    m_pRegisterRecheckPasswordText->SetLabel(pAccount->GetPassword());

    m_pRegisterSubmitBtn->SetLabel(_T("修改"));

    for (size_t i = 0; i < CAccount::eAPT_Count; ++i)
    {
        if (pAccount->CheckPrivilege((CAccount::EAccountPrivilegeType)i))
        {
            m_pPrivilegeCheckBox->Check(i, true);
        }
    }
    m_bModifyFlag = true;
}

