/////////////////////////////////////////////////////////////////////////////
// Name:        summarywindow.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     12/12/2013 21:58:25
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 12/12/2013 21:58:25

// For compilers that support precompilation, includes "wx/wx.h".
#include "stdafx.h"
#include <algorithm>
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "summarywindow.h"
#include "../ConsumeRecord/ConsumeRecord.h"
#include "../YukiNailShopManager.h"
#include "../Member/MemberManager.h"

////@begin XPM images
////@end XPM images


/*
 * CSummaryWindow type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CSummaryWindow, wxDialog )


/*
 * CSummaryWindow event table definition
 */

BEGIN_EVENT_TABLE( CSummaryWindow, wxDialog )

////@begin CSummaryWindow event table entries
    EVT_DATE_CHANGED( ID_DATECTRL, CSummaryWindow::OnSummaryDateChanged )
    EVT_COMBOBOX( ID_COMBOBOX, CSummaryWindow::OnSummaryViewTypeSelected )
    EVT_BUTTON( ID_BUTTON3, CSummaryWindow::OnSummaryBtnClick )
    EVT_BUTTON( ID_BUTTON4, CSummaryWindow::OnCloseBtnClick )
    
////@end CSummaryWindow event table entries

END_EVENT_TABLE()

/*
 * CSummaryWindow constructors
 */

CSummaryWindow::CSummaryWindow()
{
    Init();
}

CSummaryWindow::CSummaryWindow( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * CSummaryWindow creator
 */

bool CSummaryWindow::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CSummaryWindow creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end CSummaryWindow creation
    return true;
}


/*
 * CSummaryWindow destructor
 */

CSummaryWindow::~CSummaryWindow()
{
}


/*
 * Member initialisation
 */

void CSummaryWindow::Init()
{
////@begin CSummaryWindow member initialisation
    m_pSummaryDatePicker = NULL;
    m_pSummaryViewTypeCombo = NULL;
    m_pSummaryGrid = NULL;
    m_pSummaryLabel = NULL;
    m_pSummaryBtn = NULL;
    m_pSummaryCloseBtn = NULL;
////@end CSummaryWindow member initialisation
}


/*
 * Control creation for CSummaryWindow
 */

void CSummaryWindow::CreateControls()
{    
////@begin CSummaryWindow content construction
    // Generated by DialogBlocks, 12/12/2013 23:06:32 (unregistered)

    CSummaryWindow* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 1, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x8D26 + (wxChar) 0x76EE + (wxChar) 0x660E + (wxChar) 0x7EC6), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText4->SetFont(wxFont(18, wxSWISS, wxNORMAL, wxNORMAL, false, wxT("黑体")));
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL, 0);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 0, wxALIGN_RIGHT|wxALL, 5);

    m_pSummaryDatePicker = new wxDatePickerCtrl( itemDialog1, ID_DATECTRL, wxDateTime(), wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN|wxDP_SHOWCENTURY );
    wxDateTime minDatem_pSummaryDatePicker(1, (wxDateTime::Month) 0, 2013);
    wxDateTime maxDatem_pSummaryDatePicker(31, (wxDateTime::Month) 11, 2019);
    m_pSummaryDatePicker->SetRange(minDatem_pSummaryDatePicker, maxDatem_pSummaryDatePicker);
    itemBoxSizer5->Add(m_pSummaryDatePicker, 1, wxGROW|wxRIGHT, 3);

    wxArrayString m_pSummaryViewTypeComboStrings;
    m_pSummaryViewTypeComboStrings.Add(wxGetTranslation(wxString() + (wxChar) 0x67E5 + (wxChar) 0x770B + (wxChar) 0x5F53 + (wxChar) 0x5929));
    m_pSummaryViewTypeComboStrings.Add(wxGetTranslation(wxString() + (wxChar) 0x67E5 + (wxChar) 0x770B + (wxChar) 0x672C + (wxChar) 0x6708));
    m_pSummaryViewTypeComboStrings.Add(wxGetTranslation(wxString() + (wxChar) 0x67E5 + (wxChar) 0x770B + (wxChar) 0x6574 + (wxChar) 0x5E74));
    m_pSummaryViewTypeComboStrings.Add(_T("查看所有"));
    m_pSummaryViewTypeCombo = new wxComboBox( itemDialog1, ID_COMBOBOX, wxGetTranslation(wxString() + (wxChar) 0x67E5 + (wxChar) 0x770B + (wxChar) 0x5F53 + (wxChar) 0x5929), wxDefaultPosition, wxDefaultSize, m_pSummaryViewTypeComboStrings, wxCB_READONLY );
    m_pSummaryViewTypeCombo->SetStringSelection(wxGetTranslation(wxString() + (wxChar) 0x67E5 + (wxChar) 0x770B + (wxChar) 0x5F53 + (wxChar) 0x5929));
    itemBoxSizer5->Add(m_pSummaryViewTypeCombo, 0, wxALIGN_CENTER_VERTICAL, 0);

    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer8, 8, wxGROW, 0);

    m_pSummaryGrid = new wxGrid( itemDialog1, ID_GRID, wxDefaultPosition, wxSize(200, 150), wxSUNKEN_BORDER|wxHSCROLL|wxVSCROLL );
    m_pSummaryGrid->SetDefaultColSize(50);
    m_pSummaryGrid->SetDefaultRowSize(25);
    m_pSummaryGrid->SetColLabelSize(25);
    m_pSummaryGrid->SetRowLabelSize(50);
    m_pSummaryGrid->EnableEditing( false );
    m_pSummaryGrid->EnableGridLines( true );
    m_pSummaryGrid->EnableDragGridSize( false );
    m_pSummaryGrid->EnableDragColMove( false );
    m_pSummaryGrid->EnableDragColSize( true );

    m_pSummaryGrid->CreateGrid(1,8, wxGrid::wxGridSelectCells);
    m_pSummaryGrid->SetColLabelValue(0, _T("日期"));
    m_pSummaryGrid->SetColumnWidth(0, 70);
    m_pSummaryGrid->SetColLabelValue(1, _T("时间"));
    m_pSummaryGrid->SetColumnWidth(1, 50);
    m_pSummaryGrid->SetColLabelValue(2, _T("操作者"));
    m_pSummaryGrid->SetColumnWidth(2, 100);
    m_pSummaryGrid->SetColLabelValue(3, _T("金额"));
    m_pSummaryGrid->SetColumnWidth(3, 50);
    m_pSummaryGrid->SetColLabelValue(4, _T("明细"));
    m_pSummaryGrid->SetColumnWidth(4, 270);
    m_pSummaryGrid->SetColLabelValue(5, _T("类型"));
    m_pSummaryGrid->SetColumnWidth(5, 50);
    m_pSummaryGrid->SetColLabelValue(6, _T("消费者"));
    m_pSummaryGrid->SetColumnWidth(6, 100);
    m_pSummaryGrid->SetColLabelValue(7, _T("余额"));
    m_pSummaryGrid->SetColumnWidth(7, 50);


    itemBoxSizer8->Add(m_pSummaryGrid, 1, wxGROW, 0);

    wxBoxSizer* itemBoxSizer10 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer10, 0, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer10->Add(itemBoxSizer11, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pSummaryLabel = new wxStaticText( itemDialog1, wxID_STATIC, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(m_pSummaryLabel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxBoxSizer* itemBoxSizer13 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer10->Add(itemBoxSizer13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pSummaryBtn = new wxButton( itemDialog1, ID_BUTTON3, wxGetTranslation(wxString() + (wxChar) 0x7EDF + (wxChar) 0x8BA1), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer13->Add(m_pSummaryBtn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5);

    m_pSummaryCloseBtn = new wxButton( itemDialog1, ID_BUTTON4, wxGetTranslation(wxString() + (wxChar) 0x5173 + (wxChar) 0x95ED), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer13->Add(m_pSummaryCloseBtn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5);

    UpdateByDate();
////@end CSummaryWindow content construction
}


/*
 * Should we show tooltips?
 */

bool CSummaryWindow::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CSummaryWindow::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CSummaryWindow bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CSummaryWindow bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CSummaryWindow::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CSummaryWindow icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CSummaryWindow icon retrieval
}


/*
 * wxEVT_DATE_CHANGED event handler for ID_DATECTRL
 */

void CSummaryWindow::OnSummaryDateChanged( wxDateEvent& event )
{
    UpdateByDate();
}

/*
 * wxEVT_COMMAND_COMBOBOX_SELECTED event handler for ID_COMBOBOX
 */

void CSummaryWindow::OnSummaryViewTypeSelected( wxCommandEvent& event )
{
    UpdateByDate();
}

/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON3
 */

void CSummaryWindow::OnSummaryBtnClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON3 in CSummaryWindow.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON3 in CSummaryWindow. 
}

void CSummaryWindow::OnCloseBtnClick( wxCommandEvent& event )
{
    this->EndModal(1);
}

void CSummaryWindow::UpdateByDate()
{
    size_t uSelection = m_pSummaryViewTypeCombo->GetSelection();

    m_pSummaryGrid->ClearGrid();
    m_pSummaryLabel->SetLabel(_T(""));

    if (m_pSummaryGrid->GetRows() > 0)
    {
        m_pSummaryGrid->DeleteRows(0, m_pSummaryGrid->GetRows());
    }
    wxDateTime dateTime = m_pSummaryDatePicker->GetValue();
    size_t uRowIndex = 0;
    SYSTEMTIME queryer;
    queryer.wYear = dateTime.GetYear();
    queryer.wMonth = dateTime.GetMonth() + 1;
    queryer.wDay = dateTime.GetDay();
    std::vector<CConsumeRecord*> recordsToShow;
    const TYearConsumeRecordMap& records = CYukiNailShopManager::GetInstance()->GetConsumeRecordsMap();

    switch (uSelection)
    {
    case 0: // view a day
        {
            TYearConsumeRecordMap::const_iterator yearIter = records.find(&queryer);
            if (yearIter != records.end())
            {
                TMonthConsumeRecordMap::const_iterator monthIter = yearIter->second.find(&queryer);
                if (monthIter != yearIter->second.end())
                {
                    for (TDayConsumeRecordMap::const_iterator dayIter = monthIter->second.begin(); dayIter != monthIter->second.end(); ++dayIter)
                    {
                        recordsToShow.push_back(dayIter->second);
                    }
                }
            }
        }
        break;
    case 1: // month
        {
            TYearConsumeRecordMap::const_iterator yearIter = records.find(&queryer);

            if (yearIter != records.end())
            {
                for (TMonthConsumeRecordMap::const_iterator monthIter = yearIter->second.begin(); monthIter != yearIter->second.end(); ++monthIter)
                {
                    for (TDayConsumeRecordMap::const_iterator dayIter = monthIter->second.begin(); dayIter != monthIter->second.end(); ++dayIter)
                    {
                        recordsToShow.push_back(dayIter->second);
                    }
                }
            }
        }
        break;
    case 2: // year
        {
            for (TYearConsumeRecordMap::const_iterator yearIter = records.begin(); yearIter != records.end(); ++yearIter)
            {
                if (yearIter->first->wYear == queryer.wYear)
                {
                    for (TMonthConsumeRecordMap::const_iterator monthIter = yearIter->second.begin(); monthIter != yearIter->second.end(); ++monthIter)
                    {
                        for (TDayConsumeRecordMap::const_iterator dayIter = monthIter->second.begin(); dayIter != monthIter->second.end(); ++dayIter)
                        {
                            recordsToShow.push_back(dayIter->second);
                        }
                    }
                    break;
                }
            }
        }
        break;
    case 3: // All
        {
            for (TYearConsumeRecordMap::const_iterator yearIter = records.begin(); yearIter != records.end(); ++yearIter)
            {
                for (TMonthConsumeRecordMap::const_iterator monthIter = yearIter->second.begin(); monthIter != yearIter->second.end(); ++monthIter)
                {
                    for (TDayConsumeRecordMap::const_iterator dayIter = monthIter->second.begin(); dayIter != monthIter->second.end(); ++dayIter)
                    {
                        recordsToShow.push_back(dayIter->second);
                    }
                }
            }
        }
        break;
    }

    float fIncome = 0;
    float fOutcome = 0;

    for (size_t i = 0; i < recordsToShow.size(); ++i)
    {
        float fAmount = recordsToShow[i]->GetConsumeAmount();
        if (fAmount > 0 && recordsToShow[i]->GetConsumeType() != eCT_Member)
        {
            fIncome += fAmount;
        }
        else if(fAmount < 0)
        {
            fOutcome += -fAmount;
        }
        ShowRecord(recordsToShow[i], uRowIndex);
        ++uRowIndex;
    }
    if (recordsToShow.size() > 0)
    {
        wxString strLabel = wxString::Format(_T("总收入: %.2f  总支出: %.2f"), fIncome, fOutcome);
        m_pSummaryLabel->SetLabel(strLabel);
    }
}

void CSummaryWindow::ShowRecord(const CConsumeRecord* pRecord, size_t uRowIndex)
{
    m_pSummaryGrid->AppendRows(1);
    const SYSTEMTIME& createTime = pRecord->GetConsumeRecordTime();
    m_pSummaryGrid->SetCellValue(wxString::Format(_T("%d-%d-%d"), createTime.wYear, createTime.wMonth, createTime.wDay), uRowIndex, 0);
    m_pSummaryGrid->SetCellValue(wxString::Format(_T("%d:%.2d"), createTime.wHour, createTime.wMinute), uRowIndex, 1);
    const TCHAR* pszOperatorName = pRecord->GetOperatorName();
    m_pSummaryGrid->SetCellValue(pszOperatorName == NULL ? _T("未知") : pszOperatorName, uRowIndex, 2);
    if (pRecord->GetConsumeType() != eCT_VIP)
    {
        m_pSummaryGrid->SetCellValue(wxString::Format(_T("%.2f"), pRecord->GetConsumeAmount()), uRowIndex, 3);
    }
    m_pSummaryGrid->SetCellValue(pRecord->GetDetailString(), uRowIndex, 4);
    m_pSummaryGrid->SetCellValue(pRecord->GetConsumeTypeString(), uRowIndex, 5);
    if (pRecord->GetConsumeType() == eCT_Member || pRecord->GetConsumeType() == eCT_Recharge)
    {
        const TString strTel = pRecord->GetCustomerString();
        CMember* pMember = CMemberManager::GetInstance()->GetMember(strTel);
        BEATS_ASSERT(pMember != NULL);
        if (pMember != NULL)
        {
            m_pSummaryGrid->SetCellValue(wxString::Format(_T("%s @ %s"), pMember->GetName(), strTel.c_str()), uRowIndex, 6);
            m_pSummaryGrid->SetCellValue(wxString::Format(_T("%.2f"), pRecord->GetAccountBalance()), uRowIndex, 7);
        }
    }
}
