/////////////////////////////////////////////////////////////////////////////
// Name:        memberregisterwindow.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     14/12/2013 01:30:14
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 14/12/2013 01:30:14

// For compilers that support precompilation, includes "wx/wx.h".
#include "stdafx.h"
#include "../Member/MemberManager.h"
#include "../YukiNailShopManager.h"
#include "wx/wxprec.h"
#include "../MainApp.h"
#include "../ConsumeRecord/ConsumeRecord.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "memberregisterwindow.h"

////@begin XPM images
////@end XPM images


/*
 * CMemberRegisterWindow type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CMemberRegisterWindow, wxDialog )


/*
 * CMemberRegisterWindow event table definition
 */

BEGIN_EVENT_TABLE( CMemberRegisterWindow, wxDialog )

////@begin CMemberRegisterWindow event table entries
    EVT_BUTTON( ID_BUTTON10, CMemberRegisterWindow::OnMemberRegisterBtnClick )
////@end CMemberRegisterWindow event table entries

END_EVENT_TABLE()


/*
 * CMemberRegisterWindow constructors
 */

CMemberRegisterWindow::CMemberRegisterWindow()
{
    Init();
}

CMemberRegisterWindow::CMemberRegisterWindow( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * CMemberRegisterWindow creator
 */

bool CMemberRegisterWindow::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CMemberRegisterWindow creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end CMemberRegisterWindow creation
    return true;
}


/*
 * CMemberRegisterWindow destructor
 */

CMemberRegisterWindow::~CMemberRegisterWindow()
{
////@begin CMemberRegisterWindow destruction
////@end CMemberRegisterWindow destruction
}


/*
 * Member initialisation
 */

void CMemberRegisterWindow::Init()
{
////@begin CMemberRegisterWindow member initialisation
    m_pNameText = NULL;
    m_pTelText = NULL;
    m_pBalanceText = NULL;
    m_pBirthdayDatePicker = NULL;
    m_pDiscountTypeChoice = NULL;
    m_pRegisterBtn = NULL;
////@end CMemberRegisterWindow member initialisation
}


/*
 * Control creation for CMemberRegisterWindow
 */

void CMemberRegisterWindow::CreateControls()
{    
////@begin CMemberRegisterWindow content construction
    // Generated by DialogBlocks, 14/12/2013 02:09:30 (unregistered)

    CMemberRegisterWindow* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 2, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x4F1A + (wxChar) 0x5458 + (wxChar) 0x6CE8 + (wxChar) 0x518C), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText4->SetFont(wxFont(18, wxSWISS, wxNORMAL, wxNORMAL, false, wxT("黑体")));
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x59D3 + (wxChar) 0x540D), wxDefaultPosition, wxSize(50, -1), 0 );
    itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pNameText = new wxTextCtrl( itemDialog1, ID_TEXTCTRL9, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(m_pNameText, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer8, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText9 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x8054 + (wxChar) 0x7CFB + (wxChar) 0x7535 + (wxChar) 0x8BDD), wxDefaultPosition, wxSize(50, -1), 0 );
    itemBoxSizer8->Add(itemStaticText9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pTelText = new wxTextCtrl( itemDialog1, ID_TEXTCTRL10, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(m_pTelText, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer11, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText12 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x5145 + (wxChar) 0x503C + (wxChar) 0x91D1 + (wxChar) 0x989D), wxDefaultPosition, wxSize(50, -1), 0 );
    itemBoxSizer11->Add(itemStaticText12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pBalanceText = new wxTextCtrl( itemDialog1, ID_TEXTCTRL11, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer11->Add(m_pBalanceText, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer14 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer14, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText15 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x751F + (wxChar) 0x65E5), wxDefaultPosition, wxSize(50, -1), 0 );
    itemBoxSizer14->Add(itemStaticText15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pBirthdayDatePicker = new wxDatePickerCtrl( itemDialog1, ID_DATEPICKERCTRL, wxDateTime(), wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN|wxDP_DEFAULT );
    itemBoxSizer14->Add(m_pBirthdayDatePicker, 1, wxALIGN_BOTTOM|wxALL, 5);

    wxBoxSizer* itemBoxSizer17 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer17, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText18 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x6298 + (wxChar) 0x6263 + (wxChar) 0x7C7B + (wxChar) 0x578B), wxDefaultPosition, wxSize(50, -1), 0 );
    itemBoxSizer17->Add(itemStaticText18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_pDiscountTypeChoiceStrings;
    for (size_t i = 0; i < eDT_Count; ++i)
    {
        m_pDiscountTypeChoiceStrings.Insert(pszDiscountTypeString[i], i);
    }

    m_pDiscountTypeChoice = new wxChoice( itemDialog1, ID_CHOICE1, wxDefaultPosition, wxSize(100, -1), m_pDiscountTypeChoiceStrings, 0 );
    m_pDiscountTypeChoice->SetSelection(eDT_NoDiscount);
    itemBoxSizer17->Add(m_pDiscountTypeChoice, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer20 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer20, 2, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT, 15);

    m_pRegisterBtn = new wxButton( itemDialog1, ID_BUTTON10, wxGetTranslation(wxString() + (wxChar) 0x6CE8 + (wxChar) 0x518C), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer20->Add(m_pRegisterBtn, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end CMemberRegisterWindow content construction
}


/*
 * Should we show tooltips?
 */

bool CMemberRegisterWindow::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CMemberRegisterWindow::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CMemberRegisterWindow bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CMemberRegisterWindow bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CMemberRegisterWindow::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CMemberRegisterWindow icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CMemberRegisterWindow icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON10
 */

void CMemberRegisterWindow::OnMemberRegisterBtnClick( wxCommandEvent& event )
{
    SetCurrentDirectory(CMainApp::GetMainApp()->GetWorkPath().c_str());
    TString strName = m_pNameText->GetValue();
    if (strName.length() > 0)
    {
        TString strTel = m_pTelText->GetValue();
        if (strTel.length() == 11)
        {
            double fBalance = 0;
            if (m_pBalanceText->GetValue().ToDouble(&fBalance) && fBalance > 0)
            {
               wxDateTime birthday = m_pBirthdayDatePicker->GetValue();
               SYSTEMTIME birthDaySystemTime;
               birthday.GetAsMSWSysTime(&birthDaySystemTime);

               int iDiscountType = m_pDiscountTypeChoice->GetSelection();
               SYSTEMTIME curTime;
               GetLocalTime(&curTime);
               CMember* pMember = CMemberManager::GetInstance()->RegisterMember((EDiscountType)iDiscountType,strTel.c_str(), strName.c_str(), birthDaySystemTime, curTime);
               if (pMember != NULL)
               {
                   wxString strDirectory = wxString::Format(_T("Member\\%s"), pMember->GetTelString());
                   CreateDirectory(strDirectory, NULL);
                   strDirectory.Append(_T("\\MemberInfo.bin"));
                   FILE* pFile = _tfopen(strDirectory, _T("wb+"));
                   fclose(pFile);
                   TString strHistory = wxString::Format(_T("注册会员 %s Tel: %s"), strName, strTel);
                   CYukiNailShopManager::GetInstance()->AddOperationHistory(strHistory);
                   wxMessageBox(_T("注册成功!"));
                   CYukiNailShopManager::GetInstance()->SubmitConsumeRecord((float)fBalance, eCT_Recharge, strTel, wxString::Format(_T("会员 %s 充值 %.2f 元."), strName, (float)fBalance));
                   this->EndModal(1);
               }
            }
            else
            {
                wxMessageBox(_T("金额输入错误"));
                m_pBalanceText->SetFocus();
            }
        }
        else
        {
            wxMessageBox(_T("电话号码长度必须为11位!"));
            m_pTelText->SetFocus();
        }
    }
    else
    {
        wxMessageBox(_T("名字不能为空!"));
        m_pNameText->SetFocus();
    }
}

