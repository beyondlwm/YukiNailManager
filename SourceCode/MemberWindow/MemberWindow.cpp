/////////////////////////////////////////////////////////////////////////////
// Name:        memberwindow.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     14/12/2013 00:18:04
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 14/12/2013 00:18:04

// For compilers that support precompilation, includes "wx/wx.h".
#include "stdafx.h"
#include "MemberRegisterWindow.h"
#include "MemberViewWindow.h"
#include "../ConsumeRecordWindow/ConsumeRecordWindow.h"
#include "../YukiNailShopManager.h"
#include "../Account/Account.h"
#include "../Member/MemberManager.h"
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "memberwindow.h"

////@begin XPM images
////@end XPM images


/*
 * CMemberWindow type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CMemberWindow, wxDialog )


/*
 * CMemberWindow event table definition
 */

BEGIN_EVENT_TABLE( CMemberWindow, wxDialog )

////@begin CMemberWindow event table entries
    EVT_BUTTON( ID_BUTTON8, CMemberWindow::OnMemberBtnClick )
    EVT_BUTTON( ID_BUTTON9, CMemberWindow::OnMemberRegisterBtnClick )
    EVT_BUTTON( ID_BUTTON, CMemberWindow::OnViewAllMemberClick )

////@end CMemberWindow event table entries

END_EVENT_TABLE()


/*
 * CMemberWindow constructors
 */

CMemberWindow::CMemberWindow()
{
    Init();
}

CMemberWindow::CMemberWindow( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * CMemberWindow creator
 */

bool CMemberWindow::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CMemberWindow creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end CMemberWindow creation
    return true;
}


/*
 * CMemberWindow destructor
 */

CMemberWindow::~CMemberWindow()
{
////@begin CMemberWindow destruction
////@end CMemberWindow destruction
}


/*
 * Member initialisation
 */

void CMemberWindow::Init()
{
////@begin CMemberWindow member initialisation
////@end CMemberWindow member initialisation
}


/*
 * Control creation for CMemberWindow
 */

void CMemberWindow::CreateControls()
{    
////@begin CMemberWindow content construction
    // Generated by DialogBlocks, 14/12/2013 00:47:17 (unregistered)

    CMemberWindow* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 1, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x4F1A + (wxChar) 0x5458 + (wxChar) 0x767B + (wxChar) 0x5165 + (wxChar) 0x7CFB + (wxChar) 0x7EDF), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText4->SetFont(wxFont(18, wxSWISS, wxNORMAL, wxNORMAL, false, wxT("黑体")));
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 1, wxGROW|wxALL, 5);

    itemBoxSizer5->Add(5, 5, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pMemberTelText = new wxTextCtrl( itemDialog1, ID_TEXTCTRL8, wxEmptyString, wxDefaultPosition, wxSize(-1, 30), wxTE_CENTRE );
    m_pMemberTelText->SetMaxLength(11);
    m_pMemberTelText->SetForegroundColour(wxColour(119, 225, 175));
    m_pMemberTelText->SetFont(wxFont(14, wxSWISS, wxNORMAL, wxBOLD, false, wxT("方正书宋简体")));
    wxArrayString completion_choices;
    const std::map<const TString, CMember*>& memberMap = CMemberManager::GetInstance()->GetMemberMap();
    for (std::map<const TString, CMember*>::const_iterator iter = memberMap.begin(); iter != memberMap.end(); ++iter)
    {
        completion_choices.push_back(iter->first);
    }
    m_pMemberTelText->AutoComplete(completion_choices);
    itemBoxSizer5->Add(m_pMemberTelText, 3, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemBoxSizer5->Add(5, 5, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer9, 1, wxGROW|wxALL, 5);

    itemBoxSizer9->Add(5, 5, 1, wxALIGN_TOP|wxALL, 5);

    wxButton* itemButton11 = new wxButton( itemDialog1, ID_BUTTON8, wxGetTranslation(wxString(wxT(" ")) + (wxChar) 0x767B + (wxChar) 0x9646), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer9->Add(itemButton11, 2, wxALIGN_TOP|wxALL, 5);
    itemButton11->Show(CYukiNailShopManager::GetInstance()->GetCurrentOperatorAccount()->CheckPrivilege(CAccount::eAPT_MemberQuery));

    wxButton* itemButton12 = new wxButton( itemDialog1, ID_BUTTON9, wxGetTranslation(wxString() + (wxChar) 0x6CE8 + (wxChar) 0x518C), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer9->Add(itemButton12, 2, wxALIGN_TOP|wxALL, 5);
    itemButton12->Show(CYukiNailShopManager::GetInstance()->GetCurrentOperatorAccount()->CheckPrivilege(CAccount::eAPT_MemberRegister));

    wxButton* itemButton13 = new wxButton( itemDialog1, ID_BUTTON, wxGetTranslation(wxString() + (wxChar) 0x7BA1 + (wxChar) 0x7406), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer9->Add(itemButton13, 2, wxALIGN_TOP|wxALL, 5);
    itemButton13->Show(CYukiNailShopManager::GetInstance()->GetCurrentOperatorAccount()->CheckPrivilege(CAccount::eAPT_MemberManage));

    itemBoxSizer9->Add(5, 5, 1, wxALIGN_TOP|wxALL, 5);

////@end CMemberWindow content construction
}


/*
 * Should we show tooltips?
 */

bool CMemberWindow::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CMemberWindow::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CMemberWindow bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CMemberWindow bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CMemberWindow::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CMemberWindow icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CMemberWindow icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON8
 */

void CMemberWindow::OnMemberBtnClick( wxCommandEvent& event )
{
    TString strTelToQuery = m_pMemberTelText->GetValue();
    if (strTelToQuery.length() != 11)
    {
        wxMessageBox(_T("填写的号码必须是11位"));
    }
    else
    {
        CMember* pMember = CMemberManager::GetInstance()->GetMember(strTelToQuery);
        if (pMember == NULL)
        {
            wxMessageBox(wxString::Format(_T("号码 %s 不是会员"), strTelToQuery));
        }
        else
        {
            CConsumeRecordWindow dlg(this);
            dlg.UpdateData(pMember);
            dlg.ShowModal();
        }
    }
}

void CMemberWindow::OnMemberRegisterBtnClick(wxCommandEvent& event)
{
    CMemberRegisterWindow dlg(this);
    dlg.ShowModal();
}

void CMemberWindow::OnViewAllMemberClick( wxCommandEvent& event )
{
    CMemberViewWindow dlg(this);
    dlg.ShowModal();
}
