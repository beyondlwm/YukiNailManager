/////////////////////////////////////////////////////////////////////////////
// Name:        accountwindow.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     13/12/2013 13:59:10
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 13/12/2013 13:59:10

// For compilers that support precompilation, includes "wx/wx.h".
#include "stdafx.h"
#include "wx/wxprec.h"
#include "../RegisterWindow/RegisterWindow.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "wx/imaglist.h"
////@end includes

#include "../MainApp.h"
#include "accountwindow.h"
#include "../Account/Account.h"
#include "../Account/AccountManager.h"

////@begin XPM images
////@end XPM images

static const TCHAR* pszAccountColumnString[] = 
{
    _T("ID"),
    _T("账户名"),
    _T("权限"),
    _T("注册日期"),
    _T("上次登录")
};

static size_t uAccountColumnWidth[] = 
{
    30, 100, 250, 120, 120
};

/*
 * CAccountWindow type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CAccountWindow, wxDialog )

/*
 * CAccountWindow constructors
 */

CAccountWindow::CAccountWindow()
{
    Init();
}

CAccountWindow::CAccountWindow( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * CAccountWindow creator
 */

bool CAccountWindow::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CAccountWindow creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end CAccountWindow creation
    return true;
}


/*
 * CAccountWindow destructor
 */

CAccountWindow::~CAccountWindow()
{
    m_pAccountModifyBtn->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CAccountWindow::OnAccountModifyBtnClick), NULL, this);
    m_pAccountRegisterBtn->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CAccountWindow::OnAccountAddBtnClick), NULL, this);
    m_pAccountCloseBtn->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CAccountWindow::OnAccountCloseBtnClick), NULL, this);

}


/*
 * Member initialisation
 */

void CAccountWindow::Init()
{
////@begin CAccountWindow member initialisation
    m_pAccountList = NULL;
    m_pAccountModifyBtn = NULL;
    m_pAccountRegisterBtn = NULL;
    m_pAccountCloseBtn = NULL;
////@end CAccountWindow member initialisation
}


/*
 * Control creation for CAccountWindow
 */

void CAccountWindow::CreateControls()
{    
////@begin CAccountWindow content construction
    // Generated by DialogBlocks, 13/12/2013 14:10:24 (unregistered)

    CAccountWindow* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x8D26 + (wxChar) 0x6237 + (wxChar) 0x7BA1 + (wxChar) 0x7406), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText4->SetFont(wxFont(18, wxSWISS, wxNORMAL, wxNORMAL, false, wxT("黑体")));
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer5, 1, wxGROW|wxALL, 5);

    m_pAccountList = new wxListCtrl( itemDialog1, ID_LISTCTRL, wxDefaultPosition, wxSize(100, 100), wxLC_REPORT );
    size_t uColumnCount = sizeof(pszAccountColumnString) / sizeof(TCHAR*);
    for (size_t i = 0; i < uColumnCount; ++i )
    {
        m_pAccountList->InsertColumn(i, pszAccountColumnString[i]);
        m_pAccountList->SetColumnWidth(i, uAccountColumnWidth[i]);
    }
    itemBoxSizer5->Add(m_pAccountList, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer7 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer7, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_pAccountModifyBtn = new wxButton( itemDialog1, wxID_ANY, wxGetTranslation(wxString() + (wxChar) 0x4FEE + (wxChar) 0x6539), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer7->Add(m_pAccountModifyBtn, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pAccountRegisterBtn = new wxButton( itemDialog1, wxID_ANY, wxGetTranslation(wxString() + (wxChar) 0x6DFB + (wxChar) 0x52A0), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer7->Add(m_pAccountRegisterBtn, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pAccountCloseBtn = new wxButton( itemDialog1, wxID_ANY, wxGetTranslation(wxString() + (wxChar) 0x5173 + (wxChar) 0x95ED), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer7->Add(m_pAccountCloseBtn, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    UpdateData();

    m_pAccountModifyBtn->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CAccountWindow::OnAccountModifyBtnClick), NULL, this);
    m_pAccountRegisterBtn->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CAccountWindow::OnAccountAddBtnClick), NULL, this);
    m_pAccountCloseBtn->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CAccountWindow::OnAccountCloseBtnClick), NULL, this);
////@end CAccountWindow content construction
}


/*
 * Should we show tooltips?
 */

bool CAccountWindow::ShowToolTips()
{
    return true;
}

void CAccountWindow::UpdateData()
{
    m_pAccountList->DeleteAllItems();
    const std::map<size_t, CAccount*>& accountMap = CAccountManager::GetInstance()->GetAccountMap();
    wxListItem item;
    item.Clear();
    size_t uId = 0;
    for (std::map<size_t, CAccount*>::const_iterator iter = accountMap.begin(); iter != accountMap.end(); ++iter)
    {
        if (iter->first == 0) // skip the super account.
        {
            continue;
        }
        item.SetId(uId);

        item.SetColumn(0);
        item.SetText(wxString::Format(_T("%d"), iter->first));
        m_pAccountList->InsertItem(item);

        item.SetColumn(1);
        item.SetText(iter->second->GetAccountString());
        m_pAccountList->SetItem(item);

        item.SetColumn(2);
        wxString strPrivilege;
        bool bAllPrivilege = true;
        for (size_t i = 0; i < CAccount::eAPT_Count; ++i)
        {
            if (iter->second->CheckPrivilege((CAccount::EAccountPrivilegeType)i))
            {
                strPrivilege.Append(CAccount::pszAccountPrivilegeString[i]).Append(_T(" "));
            }
            else
            {
                bAllPrivilege = false;
            }
        }
        if (bAllPrivilege)
        {
            item.SetText(_T("所有权限"));
        }
        else
        {
            item.SetText(strPrivilege);
        }
        m_pAccountList->SetItem(item);

        item.SetColumn(3);
        const SYSTEMTIME& createTime = iter->second->GetCreateTime();
        item.SetText(wxString::Format(_T("%d-%d-%d %d:%.2d"), createTime.wYear, createTime.wMonth, createTime.wDay,createTime.wHour, createTime.wMinute));
        m_pAccountList->SetItem(item);

        item.SetColumn(4);
        const SYSTEMTIME& lastLoginTime = iter->second->GetLastLoginTime();
        item.SetText(wxString::Format(_T("%d-%d-%d %d:%.2d"), lastLoginTime.wYear, lastLoginTime.wMonth, lastLoginTime.wDay,lastLoginTime.wHour, lastLoginTime.wMinute));
        m_pAccountList->SetItem(item);

        ++uId;
    }
}

/*
 * Get bitmap resources
 */

wxBitmap CAccountWindow::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CAccountWindow bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CAccountWindow bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CAccountWindow::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CAccountWindow icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CAccountWindow icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON7
 */

void CAccountWindow::OnAccountModifyBtnClick( wxCommandEvent& event )
{
    long item = m_pAccountList->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    if (item == -1)
    {
        wxMessageBox(_T("请先选择一个账户进行操作"));
    }
    else
    {
        
        TString typeConvert = m_pAccountList->GetItemText(item, 1);
        CAccount* pAccount = CAccountManager::GetInstance()->GetAccount(typeConvert);
        if (pAccount != NULL)
        {
            CRegisterWindow dlg(this);
            dlg.ChangeToModifyWindow(pAccount);
            if(dlg.ShowModal())
            {
                UpdateData();
            }
        }
    }
}

/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON8
 */

void CAccountWindow::OnAccountAddBtnClick( wxCommandEvent& event )
{
    CRegisterWindow dlg(this);
    if (dlg.ShowModal())
    {
        UpdateData();
    }
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON9
 */

void CAccountWindow::OnAccountDeleteBtnClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON9 in CAccountWindow.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON9 in CAccountWindow. 
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON10
 */

void CAccountWindow::OnAccountCloseBtnClick( wxCommandEvent& event )
{
    EndModal(0);
}
