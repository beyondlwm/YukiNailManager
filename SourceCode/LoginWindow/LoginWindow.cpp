/////////////////////////////////////////////////////////////////////////////
// Name:        cloginwindow.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     12/12/2013 13:39:46
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 12/12/2013 13:39:46

// For compilers that support precompilation, includes "wx/wx.h".
#include "stdafx.h"
#include "../Account/AccountManager.h"
#include "loginwindow.h"
#include "../MainApp.h"
#include "../YukiNailShopManager.h"

////@begin XPM images

////@end XPM images


/*
 * CLoginWindow type definition
 */

IMPLEMENT_CLASS( CLoginWindow, wxDialog )


/*
 * CLoginWindow event table definition
 */

BEGIN_EVENT_TABLE( CLoginWindow, wxDialog )

EVT_TEXT_ENTER( ID_TEXTCTRL, CLoginWindow::OnLoginAccountTextEnter )
EVT_TEXT_ENTER( ID_TEXTCTRL1, CLoginWindow::OnLoginPasswordTextEnter )
EVT_BUTTON( ID_BUTTON, CLoginWindow::OnLoginBtnClick )

END_EVENT_TABLE()


/*
 * CLoginWindow constructors
 */

CLoginWindow::CLoginWindow()
{
    Init();
}

CLoginWindow::CLoginWindow( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create( parent, id, caption, pos, size, style );
}


/*
 * CLoginWindow creator
 */

bool CLoginWindow::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CLoginWindow creation
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end CLoginWindow creation
    return true;
}


/*
 * CLoginWindow destructor
 */

CLoginWindow::~CLoginWindow()
{
////@begin CLoginWindow destruction
////@end CLoginWindow destruction
    BEATS_SAFE_DELETE(m_pBackGroundImage);
}


/*
 * Member initialisation
 */

void CLoginWindow::Init()
{
////@begin CLoginWindow member initialisation
    m_pLoginAccountText = NULL;
    m_pLoginPasswordText = NULL;
    m_pLoginBtn = NULL;
////@end CLoginWindow member initialisation
}


/*
 * Control creation for CLoginWindow
 */

void CLoginWindow::CreateControls()
{    
////@begin CLoginWindow content construction
    SetCurrentDirectory(CMainApp::GetMainApp()->GetWorkPath().c_str());
    m_pBackGroundImage = new wxImage(_T("../Resource/LoginWindowBackground.jpg"), wxBITMAP_TYPE_JPEG);
    wxSize windowSize = m_pBackGroundImage->GetSize();
    this->SetSize(windowSize);

    m_pMainPanel = new wxPanel(this);

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    m_pMainPanel->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 3, wxALIGN_CENTER_HORIZONTAL, 0);

    wxStaticText* itemStaticText4 = new CTransparentStaticText( m_pMainPanel, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x963F + (wxChar) 0x82B1 + (wxChar) 0x521B + (wxChar) 0x610F + (wxChar) 0x7F8E + (wxChar) 0x7532 + (wxChar) 0x7BA1 + (wxChar) 0x7406 + (wxChar) 0x7CFB + (wxChar) 0x7EDF), m_pBackGroundImage, wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    itemStaticText4->SetForegroundColour(wxColour(196, 244, 235));
    itemStaticText4->SetFont(wxFont(24, wxSWISS, wxNORMAL, wxNORMAL, false, wxT("汉仪秀英体简")));
    itemBoxSizer3->Add(itemStaticText4, 1, wxALIGN_CENTER_VERTICAL, 0);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer5, 3, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer5->Add(itemBoxSizer6, 0, wxALIGN_LEFT|wxLEFT, 5);

    wxStaticText* itemStaticText7 = new CTransparentStaticText( m_pMainPanel, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x767B + (wxChar) 0x5F55 + (wxChar) 0x540D), m_pBackGroundImage, wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer6->Add(itemStaticText7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pLoginAccountText = new wxTextCtrl( m_pMainPanel, ID_TEXTCTRL, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER );
    itemBoxSizer6->Add(m_pLoginAccountText, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer5->Add(itemBoxSizer9, 0, wxALIGN_LEFT|wxLEFT, 5);

    wxStaticText* itemStaticText10 = new CTransparentStaticText( m_pMainPanel, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x5BC6 + (wxChar) 0x7801 + wxT("  ")), m_pBackGroundImage, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer9->Add(itemStaticText10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pLoginPasswordText = new wxTextCtrl( m_pMainPanel, ID_TEXTCTRL1, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER|wxTE_PASSWORD );
    itemBoxSizer9->Add(m_pLoginPasswordText, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer12 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer5->Add(itemBoxSizer12, 0, wxGROW|wxALL, 5);

    itemBoxSizer12->Add(5, 5, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 20);

    m_pLoginBtn = new wxButton( m_pMainPanel, ID_BUTTON, wxGetTranslation(wxString() + (wxChar) 0x767B + (wxChar) 0x9646), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer12->Add(m_pLoginBtn, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 5);

    m_pMainPanel->Connect(wxEVT_PAINT, wxPaintEventHandler(CLoginWindow::OnPaint), NULL, this);

////@end CLoginWindow content construction
}

/*
 * wxEVT_COMMAND_TEXT_ENTER event handler for ID_TEXTCTRL
 */

void CLoginWindow::OnLoginAccountTextEnter( wxCommandEvent& event )
{
    wxString strAccount = m_pLoginAccountText->GetValue();
    if (strAccount.Len() == 0)
    {
        wxMessageBox(_T("登录名不能为空"));
    }
}


/*
 * wxEVT_COMMAND_TEXT_ENTER event handler for ID_TEXTCTRL1
 */

void CLoginWindow::OnLoginPasswordTextEnter( wxCommandEvent& event )
{
    wxString strPassword = m_pLoginAccountText->GetValue();
    if (strPassword.Len() == 0)
    {
        wxMessageBox(_T("密码不能为空"));
    }
    else
    {
        OnLoginBtnClick( event );
    }
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON
 */

void CLoginWindow::OnLoginBtnClick( wxCommandEvent& event )
{
    TString strAccount = m_pLoginAccountText->GetValue();
    if (strAccount.length() == 0)
    {
        wxMessageBox(_T("账号不能为空"));
    }
    else
    {
        TString strPassword = m_pLoginPasswordText->GetValue();
        if (strPassword.length() == 0)
        {
            wxMessageBox(_T("密码不能为空"));
        }
        else
        {
            CAccount* pAccount = CAccountManager::GetInstance()->Login(strAccount, strPassword);
            if (pAccount != NULL)
            {
                CAccountManager::GetInstance()->SaveAccountData();
                CYukiNailShopManager::GetInstance()->Login(pAccount);
                EndModal(1);
            }
            else
            {
                wxMessageBox(_T("账号不存在或者密码不匹配"));
                m_pLoginPasswordText->Clear();
            }
        }
    }
}


/*
 * Should we show tooltips?
 */

bool CLoginWindow::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CLoginWindow::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CLoginWindow bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CLoginWindow bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CLoginWindow::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CLoginWindow icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CLoginWindow icon retrieval
}

void CLoginWindow::OnPaint( wxPaintEvent& event )
{
    wxWindow* window = wxDynamicCast(event.GetEventObject(), wxWindow);
    wxPaintDC dc(window);
    wxRect rect = window->GetClientRect();
    if (m_pBackGroundImage->Ok() && m_pBackGroundImage->GetWidth() > 0 && m_pBackGroundImage->GetHeight() > 0)
    {
        int w = m_pBackGroundImage->GetWidth();
        int h = m_pBackGroundImage->GetHeight();

        wxMemoryDC dcMem;

        dcMem.SelectObjectAsSource(*m_pBackGroundImage);
        int i, j;
        for (i = rect.x; i < rect.x + rect.width; i += w)
        {
            for (j = rect.y; j < rect.y + rect.height; j+= h)
                dc.Blit(i, j, w, h, & dcMem, 0, 0);
        }
        dcMem.SelectObject(wxNullBitmap);
    }
}
